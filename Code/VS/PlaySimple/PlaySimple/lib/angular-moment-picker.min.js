/*! Angular Moment Picker - v0.5.7 - https://github.com/indrimuska/angular-moment-picker - (c) 2015 Indri Muska - MIT */
!function (a) { "use strict"; var b, c, d, e, f, g, h = function () { function b() { c = { locale: "en", format: "L LTS", minView: "decade", maxView: "minute", startView: "year", today: !1, autoclose: !0, leftArrow: "&larr;", rightArrow: "&rarr;", yearsFormat: "YYYY", monthsFormat: "MMM", daysFormat: "D", hoursFormat: "HH:[00]", secondsFormat: "ss", minutesStep: 5, secondsStep: 1 } } var c; return b.prototype.options = function (b) { return a.extend(c, b), a.copy(c) }, b.prototype.$get = function () { return c }, b }(), i = function () { function h(a) { var b, c, d, e; if (a) return a.getClientRects().length ? (d = a.getBoundingClientRect(), d.width || d.height ? (e = a.ownerDocument, c = null != e && e === e.window ? a : 9 === e.nodeType && e.defaultView, b = e.documentElement, { top: d.top + c.pageYOffset - b.clientTop, left: d.left + c.pageXOffset - b.clientLeft }) : d) : { top: 0, left: 0 } } function i(a, h, i, j, k, l) { this.restrict = "A", this.scope = { model: "=momentPicker", locale: "@?", format: "@?", minView: "@?", maxView: "@?", startView: "@?", minDate: "=?", maxDate: "=?", today: "=?", disabled: "=?disable", autoclose: "=?", change: "&?" }, b = a, c = h, d = i, e = j, f = k, g = l } return i.prototype.$inject = ["$timeout", "$sce", "$compile", "$document", "$window", "momentPicker"], i.prototype.link = function (i, j, k) { i.template = '<div class="moment-picker-container {{view.selected}}-view" ng-show="view.isOpen && !disabled" ng-class="{\'moment-picker-disabled\': disabled, \'open\': view.isOpen}"><table class="header-view"><thead><tr><th ng-class="{disabled: !view.previous.selectable}" ng-bind-html="view.previous.label" ng-click="view.previous.set()"></th><th ng-bind="view.title" ng-click="view.setParentView()"></th><th ng-class="{disabled: !view.next.selectable}" ng-bind-html="view.next.label" ng-click="view.next.set()"></th></tr></thead></table><div class="moment-picker-specific-views"><table ng-if="view.selected == \'decade\'"><tbody><tr ng-repeat="fourYear in decadeView.fourYears"><td ng-repeat="year in fourYear track by year.year" ng-class="year.class" ng-bind="year.label" ng-click="decadeView.setYear(year)"></td></tr></tbody></table><table ng-if="view.selected == \'year\'"><tbody><tr ng-repeat="fourMonth in yearView.fourMonths"><td ng-repeat="month in fourMonth track by month.month" ng-class="month.class" ng-bind="month.label" ng-click="yearView.setMonth(month)"></td></tr></tbody></table><table ng-if="view.selected == \'month\'"><thead><tr><th ng-repeat="day in monthView.days" ng-bind="day"></th></tr></thead><tbody><tr ng-repeat="days in monthView.weeks"><td ng-repeat="day in days track by day.date" ng-class="day.class" ng-bind="day.label" ng-click="monthView.setDate(day)"></td></tr></tbody></table><table ng-if="view.selected == \'day\'"><tbody><tr ng-repeat="threeHours in dayView.threeHours"><td ng-repeat="hour in threeHours track by hour.hour" ng-class="hour.class" ng-bind="hour.label" ng-click="dayView.setHour(hour)"></td></tr></tbody></table><table ng-if="view.selected == \'hour\'"><tbody><tr ng-repeat="minutes in hourView.minutes"><td ng-repeat="minute in minutes" ng-class="minute.class" ng-bind="minute.label" ng-click="hourView.setMinute(minute)"></td></tr></tbody></table><table ng-if="view.selected == \'minute\'"><tbody><tr ng-repeat="seconds in minuteView.seconds"><td ng-repeat="second in seconds" ng-class="second.class" ng-bind="second.label" ng-click="minuteView.setSecond(second)"></td></tr></tbody></table></div></div>', a.forEach(["locale", "format", "minView", "maxView", "startView", "today", "leftArrow", "rightArrow", "autoclose"], function (b) { a.isDefined(i[b]) || (i[b] = g[b]), a.isDefined(k[b]) || (k[b] = i[b]) }), i.momentToDate = function (b) { return a.isDefined(b) && b.isValid() ? b.clone().toDate() : void 0 }, i.valueUpdate = function () { i.disabled || (i.value = i.momentToDate(i.valueMoment)) }, i.limits = { isAfterOrEqualMin: function (b, c) { return !a.isDefined(i.minDateMoment) || b.isAfter(i.minDateMoment, c) || b.isSame(i.minDateMoment, c) }, isBeforeOrEqualMax: function (b, c) { return !a.isDefined(i.maxDateMoment) || b.isBefore(i.maxDateMoment, c) || b.isSame(i.maxDateMoment, c) }, isSelectable: function (a, b) { return i.limits.isAfterOrEqualMin(a, b) && i.limits.isBeforeOrEqualMax(a, b) }, checkValue: function () { a.isDefined(i.valueMoment) && (i.limits.isAfterOrEqualMin(i.valueMoment) || i.valueUpdate(i.valueMoment = i.minDateMoment.clone()), i.limits.isBeforeOrEqualMax(i.valueMoment) || i.valueUpdate(i.valueMoment = i.maxDateMoment.clone())) }, checkView: function () { a.isDefined(i.view.moment) || (i.view.moment = moment().locale(i.locale)), i.limits.isAfterOrEqualMin(i.view.moment) || (i.view.moment = i.minDateMoment.clone()), i.limits.isBeforeOrEqualMax(i.view.moment) || (i.view.moment = i.maxDateMoment.clone()), i.view.update() } }, i.views = { all: ["decade", "year", "month", "day", "hour", "minute"], formats: { decade: "Y{1,2}(?!Y)|YYYY|[Ll]{1,4}(?!T)", year: "M{1,4}(?![Mo])|Mo|Q", month: "[Dd]{1,4}(?![Ddo])|DDDo|[Dd]o|[Ww]{1,2}(?![Wwo])|[Ww]o|[Ee]|L{1,2}(?!T)|l{1,2}", day: "[Hh]{1,2}|LTS?", hour: "m{1,2}|[Ll]{3,4}|LT(?!S)", minute: "s{1,2}|S{1,}|X|LTS" }, detectMinMax: function () { var b, c; a.forEach(i.views.formats, function (d, e) { var f = new RegExp("(" + d + ")(?![^[]*])", "g"); i.format.match(f) && (a.isDefined(b) || (b = e), c = e) }), b = a.isDefined(b) ? Math.max(0, i.views.all.indexOf(b)) : 0, c = a.isDefined(c) ? Math.min(i.views.all.length - 1, i.views.all.indexOf(c)) : i.views.all.length - 1, b > i.views.all.indexOf(i.minView) && (i.minView = i.views.all[b]), c < i.views.all.indexOf(i.maxView) && (i.maxView = i.views.all[c]) } }, i.view = { isOpen: !1, selected: i.startView, update: function () { i.view.value = i.momentToDate(i.view.moment) }, toggle: function () { i.view.isOpen ? i.view.close() : i.view.open() }, open: function () { a.forEach(e[0].querySelectorAll(".moment-picker-container.open"), function (b) { ((a.element(b).scope().view || {}).close || a.noop)() }), i.disabled || (i.view.isOpen = !0), b(i.view.position, 0, !1) }, close: function () { i.view.isOpen = !1, i.view.selected = i.startView }, position: function () { i.picker.removeClass("top").removeClass("left"); var a = i.container[0], b = h(a), c = b.top - f.pageYOffset, d = b.left - f.pageXOffset, e = f.innerWidth, g = f.innerHeight; c + f.pageYOffset - a.offsetHeight > 0 && c > g / 2 && i.picker.addClass("top"), d + a.offsetWidth > e && i.picker.addClass("left") }, unit: function () { return "decade" == i.view.selected ? 10 : 1 }, precision: function () { return i.view.selected.replace("decade", "year") }, title: "", previous: { label: c.trustAsHtml(i.leftArrow), selectable: !0, set: function () { i.view.previous.selectable && i.view.update(i.view.moment.subtract(i.view.unit(), i.view.precision()).toDate()) } }, next: { selectable: !0, label: c.trustAsHtml(i.rightArrow), set: function () { i.view.next.selectable && i.view.update(i.view.moment.add(i.view.unit(), i.view.precision()).toDate()) } }, setParentView: function () { i.view.change(i.views.all[Math.max(0, i.views.all.indexOf(i.view.selected) - 1)]) }, render: function () { var a = i.view.moment.clone().startOf(i.view.precision()).subtract(i.view.unit(), i.view.precision()), b = i.view.moment.clone().endOf(i.view.precision()).add(i.view.unit(), i.view.precision()); i.view.previous.selectable = i.limits.isAfterOrEqualMin(a, i.view.precision()), i.view.previous.label = c.trustAsHtml(i.view.previous.selectable ? i.leftArrow : "&nbsp;"), i.view.next.selectable = i.limits.isBeforeOrEqualMax(b, i.view.precision()), i.view.next.label = c.trustAsHtml(i.view.next.selectable ? i.rightArrow : "&nbsp;"), i.view.title = i[i.view.selected + "View"].render() }, change: function (a) { var b = i.views.all.indexOf(a), c = i.views.all.indexOf(i.minView), d = i.views.all.indexOf(i.maxView); 0 > b || b > d ? (i.valueUpdate(i.valueMoment = i.view.moment.clone()), i.autoclose && i.view.close()) : b >= c && (i.view.selected = a) } }, i.decadeView = { fourYears: {}, render: function () { var a = i.view.moment.clone(), b = 10 * Math.floor(a.year() / 10) - 1; a.year(b), i.decadeView.fourYears = {}; for (var c = 0; 12 > c; c++) { var d = Math.floor(c / 4), e = i.limits.isSelectable(a, "year"); i.decadeView.fourYears[d] || (i.decadeView.fourYears[d] = []), i.decadeView.fourYears[d].push({ label: a.format(g.yearsFormat), year: a.year(), "class": !e || [0, 11].indexOf(c) >= 0 ? "disabled" : a.isSame(i.valueMoment, "year") ? "selected" : "", selectable: e }), a.add(1, "years") } return [a.subtract(2, "years").format("YYYY"), a.subtract(9, "years").format("YYYY")].reverse().join(" - ") }, setYear: function (a) { a.selectable && (i.view.update(i.view.moment.year(a.year)), i.view.change("year")) } }, i.yearView = { fourMonths: {}, render: function () { var a = i.view.moment.clone().startOf("year"), b = moment.monthsShort(); return i.yearView.fourMonths = {}, b.forEach(function (b, c) { var d = Math.floor(c / 4), e = i.limits.isSelectable(a, "month"); i.yearView.fourMonths[d] || (i.yearView.fourMonths[d] = []), i.yearView.fourMonths[d].push({ label: a.format(g.monthsFormat), year: a.year(), month: a.month(), "class": e ? a.isSame(i.valueMoment, "month") ? "selected" : "" : "disabled", selectable: e }), a.add(1, "months") }), i.view.moment.format("YYYY") }, setMonth: function (a) { a.selectable && (i.view.update(i.view.moment.year(a.year).month(a.month)), i.view.change("month")) } }, i.monthView = { days: function () { for (var a = [], b = moment().locale(i.locale).startOf("week"), c = 0; 7 > c; c++) a.push(b.format("dd")), b.add(1, "days"); return a }(), weeks: [], render: function () { var b = i.view.moment.month(), c = i.view.moment.clone().startOf("month").startOf("week"), d = {}, e = c.week(), f = e + 5; i.monthView.weeks = []; for (var h = e; f >= h; h++) d[h] = "0000000".split("").map(function () { var a = i.limits.isSelectable(c, "day"), d = { label: c.format(g.daysFormat), year: c.year(), date: c.date(), month: c.month(), "class": [i.today && c.isSame(new Date, "day") ? "today" : "", a && c.month() == b ? c.isSame(i.valueMoment, "day") ? "selected" : "" : "disabled"].join(" ").trim(), selectable: a }; return c.add(1, "days"), d }); return a.forEach(d, function (a) { i.monthView.weeks.push(a) }), i.view.moment.format("MMMM YYYY") }, setDate: function (a) { a.selectable && (i.view.update(i.view.moment.year(a.year).month(a.month).date(a.date)), i.view.change("day")) } }, i.dayView = { threeHours: [], render: function () { var a = i.view.moment.clone().startOf("day"); i.dayView.threeHours = []; for (var b = 0; 24 > b; b++) { var c = Math.floor(b / 4), d = i.limits.isSelectable(a, "hour"); i.dayView.threeHours[c] || (i.dayView.threeHours[c] = []), i.dayView.threeHours[c].push({ label: a.format(g.hoursFormat), year: a.year(), month: a.month(), date: a.date(), hour: a.hour(), "class": d ? a.isSame(i.valueMoment, "hour") ? "selected" : "" : "disabled", selectable: d }), a.add(1, "hours") } return i.view.moment.format("LL") }, setHour: function (a) { a.selectable && (i.view.update(i.view.moment.year(a.year).month(a.month).date(a.date).hour(a.hour)), i.view.change("hour")) } }, i.hourView = { minutes: [], render: function () { var a = 0, b = i.view.moment.clone().startOf("hour"), c = g.minutesFormat || moment.localeData(i.locale).longDateFormat("LT").replace(/[aA]/, ""); i.hourView.minutes = []; for (var d = 0; 60 > d; d += g.minutesStep) { var e = Math.floor(a / 4), f = i.limits.isSelectable(b, "minute"); i.hourView.minutes[e] || (i.hourView.minutes[e] = []), i.hourView.minutes[e].push({ label: b.format(c), year: b.year(), month: b.month(), date: b.date(), hour: b.hour(), minute: b.minute(), "class": f ? b.isSame(i.valueMoment, "minute") ? "selected" : "" : "disabled", selectable: f }), a++, b.add(g.minutesStep, "minutes") } return i.view.moment.clone().startOf("hour").format("lll") }, setMinute: function (a) { a.selectable && (i.view.update(i.view.moment.year(a.year).month(a.month).date(a.date).hour(a.hour).minute(a.minute)), i.view.change("minute")) } }, i.minuteView = { seconds: [], render: function () { var a = 0, b = i.view.moment.clone().startOf("minute"); i.minuteView.seconds = []; for (var c = 0; 60 > c; c += g.secondsStep) { var d = Math.floor(a / 6), e = i.limits.isSelectable(b, "second"); i.minuteView.seconds[d] || (i.minuteView.seconds[d] = []), i.minuteView.seconds[d].push({ label: b.format(g.secondsFormat), year: b.year(), month: b.month(), date: b.date(), hour: b.hour(), minute: b.minute(), second: b.second(), "class": e ? b.isSame(i.valueMoment, "second") ? "selected" : "" : "disabled", selectable: e }), a++, b.add(g.secondsStep, "seconds") } return i.view.moment.clone().startOf("minute").format("lll") }, setSecond: function (a) { a.selectable && (i.view.update(i.view.moment.year(a.year).month(a.month).date(a.date).hour(a.hour).minute(a.minute).second(a.second)), i.view.change("second")) } }, i.picker = a.element('<span class="moment-picker"></span>'), j.after(i.picker), i.contents = j.addClass("moment-picker-contents").removeAttr("moment-picker"), i.container = d(i.template)(i), i.picker.append(i.contents), i.picker.append(i.container), i.views.detectMinMax(), i.limits.checkView(), i.$watch("model", function (b) { a.isDefined(b) && (i.valueMoment = moment(b, i.format, i.locale), i.valueMoment.isValid() ? (i.view.moment = i.valueMoment.clone(), i.view.update()) : i.valueMoment = void 0), i.valueUpdate(i.valueMoment), i.limits.checkValue() }), i.$watch("value", function () { if (a.isDefined(i.valueMoment)) { var c = i.model, d = i.valueMoment.format(i.format); d != c && b(function () { i.view.update(i.view.moment = i.valueMoment.clone()), i.model = d, a.isFunction(i.change) && b(function () { i.change({ newValue: d, oldValue: c }) }, 0, !1) }) } }), i.$watch("[view.selected, view.value]", i.view.render, !0), i.$watch("[minView, maxView]", function () { i.views.detectMinMax(), i.startView = i.views.all[Math.max(Math.min(i.views.all.indexOf(i.startView), i.views.all.indexOf(i.maxView)), i.views.all.indexOf(i.minView))], i.view.selected = i.startView }), i.$watch("[minDate, maxDate]", function () { a.forEach(["minDate", "maxDate"], function (b) { a.isDefined(i[b]) && (i[b + "Moment"] = moment(i[b], i.format, i.locale), i[b + "Moment"].isValid() || (i[b + "Moment"] = void 0)) }), i.limits.checkValue(), i.limits.checkView(), i.view.render() }, !0), i.$watch("locale", function (b, c) { a.isDefined(c) && b != c && (a.forEach(["model", "minDate", "maxDate"], function (d) { a.isDefined(i[d]) && (i[d] = moment(i[d], i.format, c).locale(b).format(i.format)) }), i.view.render()) }), e.on("click", function () { i.view.isOpen && b(i.view.close) }), i.container.on("click", function (a) { a.stopPropagation() }), i.contents.on("click", function (a) { a.stopPropagation(), i.view.isOpen || b(i.view.open) }), a.element(i.contents[0].querySelector("input")).on("focus", function () { i.view.isOpen || b(i.view.open) }), a.element(f).on("resize", i.view.position) }, i }(); a.module("moment-picker", []).provider("momentPicker", [function () { return new h }]).directive("momentPicker", ["$timeout", "$sce", "$compile", "$document", "$window", "momentPicker", function (a, b, c, d, e, f) { return new i(a, b, c, d, e, f) }]) }(window.angular);